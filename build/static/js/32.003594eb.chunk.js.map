{"version":3,"sources":["app/views/material-kit/dialog/SimpleDialog.jsx","app/views/material-kit/dialog/SimpleAlerts.jsx","app/views/material-kit/dialog/DialogTransition.jsx","app/views/material-kit/dialog/FormDialog.jsx","app/views/material-kit/dialog/CustomizedDialog.jsx","app/views/material-kit/dialog/FullScreenDialog.jsx","app/views/material-kit/dialog/OptimalSizeDialog.jsx","app/views/material-kit/dialog/ResponsiveDialog.jsx","app/views/material-kit/dialog/ConfirmationDialog.jsx","app/views/material-kit/dialog/AppDialog.jsx"],"names":["emails","SimpleDialog","props","onClose","selectedValue","other","handleListItemClick","value","Dialog","DialogTitle","id","List","map","email","ListItem","button","onClick","ListItemAvatar","Avatar","sx","backgroundColor","blue","color","ListItemText","primary","SimpleDialogDemo","open","setOpen","React","useState","setSelectedValue","Typography","variant","Button","AlertDialog","handleClose","DialogContent","DialogContentText","DialogActions","autoFocus","Transition","forwardRef","ref","Slide","direction","AlertDialogSlide","TransitionComponent","keepMounted","FormDialog","TextField","margin","label","type","fullWidth","DialogTitleRoot","styled","MuiDialogTitle","theme","padding","spacing","position","right","top","palette","grey","children","disableTypography","IconButton","className","MuiDialogContent","MuiDialogActions","CustomizedDialogs","Component","state","handleClickOpen","this","setState","render","dividers","gutterBottom","FullScreenDialog","useTheme","fullScreen","AppBar","Toolbar","edge","flex","marginLeft","secondary","Divider","DialogRoot","display","flexDirection","width","marginTop","minWidth","MaxWidthDialog","setFullWidth","maxWidth","setMaxWidth","noValidate","FormControl","InputLabel","htmlFor","Select","onChange","event","target","inputProps","name","MenuItem","FormControlLabel","control","Switch","checked","ResponsiveDialog","useMediaQuery","breakpoints","down","options","ConfirmationDialogRaw","valueProp","setValue","radioGroupRef","useRef","useEffect","disableBackdropClick","disableEscapeKeyDown","onEntering","current","focus","RadioGroup","newValue","option","Radio","background","paper","maxHeight","ConfirmationDialog","component","role","divider","disabled","Container","marginBottom","AppDialog","routeSegments","path","title","Box","py","CustomizedDialog"],"mappings":"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","file":"static/js/32.003594eb.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@mui/material/Button'\nimport Avatar from '@mui/material/Avatar'\nimport List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\nimport ListItemText from '@mui/material/ListItemText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport Dialog from '@mui/material/Dialog'\nimport PersonIcon from '@mui/icons-material/Person'\nimport AddIcon from '@mui/icons-material/Add'\nimport Typography from '@mui/material/Typography'\nimport { blue } from '@mui/material/colors'\n\nconst emails = ['username@gmail.com', 'user02@gmail.com']\n\nfunction SimpleDialog(props) {\n    const { onClose, selectedValue, ...other } = props\n\n    function handleClose() {\n        onClose(selectedValue)\n    }\n    function handleListItemClick(value) {\n        onClose(value)\n    }\n\n    return (\n        <Dialog\n            onClose={handleClose}\n            aria-labelledby=\"simple-dialog-title\"\n            {...other}\n        >\n            <DialogTitle id=\"simple-dialog-title\">\n                Set backup account\n            </DialogTitle>\n            <List>\n                {emails.map((email) => (\n                    <ListItem\n                        button\n                        onClick={() => handleListItemClick(email)}\n                        key={email}\n                    >\n                        <ListItemAvatar>\n                            <Avatar\n                                sx={{\n                                    backgroundColor: blue[100],\n                                    color: blue[600],\n                                }}\n                            >\n                                <PersonIcon />\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText primary={email} />\n                    </ListItem>\n                ))}\n\n                <ListItem\n                    button\n                    onClick={() => handleListItemClick('addAccount')}\n                >\n                    <ListItemAvatar>\n                        <Avatar>\n                            <AddIcon />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary=\"add account\" />\n                </ListItem>\n            </List>\n        </Dialog>\n    )\n}\n\nSimpleDialog.propTypes = {\n    onClose: PropTypes.func,\n    open: PropTypes.bool,\n    selectedValue: PropTypes.string,\n}\n\nexport default function SimpleDialogDemo() {\n    const [open, setOpen] = React.useState(false)\n    const [selectedValue, setSelectedValue] = React.useState(emails[1])\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n\n    const handleClose = (value) => {\n        setOpen(false)\n        setSelectedValue(value)\n    }\n\n    return (\n        <div>\n            <Typography variant=\"subtitle1\">\n                Selected: {selectedValue}\n            </Typography>\n            <br />\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Open simple dialog\n            </Button>\n            <SimpleDialog\n                selectedValue={selectedValue}\n                open={open}\n                onClose={handleClose}\n            />\n        </div>\n    )\n}\n","import React from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nexport default function AlertDialog() {\n    const [open, setOpen] = React.useState(false)\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n\n    function handleClose() {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Open alert dialog\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">\n                    {\"Use Google's location service?\"}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Let Google help apps determine location. This means\n                        sending anonymous location data to Google, even when no\n                        apps are running.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n","import React from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport Slide from '@mui/material/Slide'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nexport default function AlertDialogSlide() {\n    const [open, setOpen] = React.useState(false)\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n\n    function handleClose() {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Slide in alert dialog\n            </Button>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">\n                    {\"Use Google's location service?\"}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        Let Google help apps determine location. This means\n                        sending anonymous location data to Google, even when no\n                        apps are running.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n","import React from 'react'\nimport Button from '@mui/material/Button'\nimport TextField from '@mui/material/TextField'\nimport Dialog from '@mui/material/Dialog'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport DialogTitle from '@mui/material/DialogTitle'\n\nexport default function FormDialog() {\n    const [open, setOpen] = React.useState(false)\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n\n    function handleClose() {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Open form dialog\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        To subscribe to this website, please enter your email\n                        address here. We will send updates occasionally.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Email Address\"\n                        type=\"email\"\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        onClick={handleClose}\n                    >\n                        Cancel\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Subscribe\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n","import React from 'react'\nimport { styled } from '@mui/system'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport CloseIcon from '@mui/icons-material/Close'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport MuiDialogTitle from '@mui/material/DialogTitle'\nimport MuiDialogContent from '@mui/material/DialogContent'\nimport MuiDialogActions from '@mui/material/DialogActions'\n\nconst DialogTitleRoot = styled(MuiDialogTitle)(({ theme }) => ({\n    margin: 0,\n    padding: theme.spacing(2),\n    '& .closeButton': {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}))\n\nconst DialogTitle = ((props) => {\n    const { children, onClose } = props\n    return (\n        <DialogTitleRoot disableTypography>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton\n                    aria-label=\"Close\"\n                    className='closeButton'\n                    onClick={onClose}\n                >\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </DialogTitleRoot>\n    )\n})\n\nconst DialogContent = styled(MuiDialogContent)(({ theme }) => ({\n    \"&.root\": {\n        padding: theme.spacing(2),\n    },\n}))\n\nconst DialogActions = styled(MuiDialogActions)(({ theme }) => ({\n    '&.root': {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))\n\nclass CustomizedDialogs extends React.Component {\n    state = {\n        open: false,\n    }\n\n    handleClickOpen = () => {\n        this.setState({\n            open: true,\n        })\n    }\n\n    handleClose = () => {\n        this.setState({ open: false })\n    }\n\n    render() {\n        return (\n            <div>\n                <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={this.handleClickOpen}\n                >\n                    Open dialog\n                </Button>\n                <Dialog\n                    onClose={this.handleClose}\n                    aria-labelledby=\"customized-dialog-title\"\n                    open={this.state.open}\n                >\n                    <DialogTitle\n                        id=\"customized-dialog-title\"\n                        onClose={this.handleClose}\n                    >\n                        Modal title\n                    </DialogTitle>\n                    <DialogContent dividers>\n                        <Typography gutterBottom>\n                            Cras mattis consectetur purus sit amet fermentum.\n                            Cras justo odio, dapibus ac facilisis in, egestas\n                            eget quam. Morbi leo risus, porta ac consectetur ac,\n                            vestibulum at eros.\n                        </Typography>\n                        <Typography gutterBottom>\n                            Praesent commodo cursus magna, vel scelerisque nisl\n                            consectetur et. Vivamus sagittis lacus vel augue\n                            laoreet rutrum faucibus dolor auctor.\n                        </Typography>\n                        <Typography gutterBottom>\n                            Aenean lacinia bibendum nulla sed consectetur.\n                            Praesent commodo cursus magna, vel scelerisque nisl\n                            consectetur et. Donec sed odio dui. Donec\n                            ullamcorper nulla non metus auctor fringilla.\n                        </Typography>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Save changes\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nexport default CustomizedDialogs\n","import React from 'react'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport ListItemText from '@mui/material/ListItemText'\nimport ListItem from '@mui/material/ListItem'\nimport List from '@mui/material/List'\nimport Divider from '@mui/material/Divider'\nimport AppBar from '@mui/material/AppBar'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport Slide from '@mui/material/Slide'\nimport { H6 } from 'app/components/Typography'\nimport { useTheme } from '@mui/system'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nexport default function FullScreenDialog() {\n    const theme = useTheme()\n    const [open, setOpen] = React.useState(false)\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n    function handleClose() {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Open full-screen dialog\n            </Button>\n            <Dialog\n                fullScreen\n                open={open}\n                onClose={handleClose}\n                TransitionComponent={Transition}\n            >\n                <AppBar sx={{ position: 'relative' }}>\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            onClick={handleClose}\n                            aria-label=\"Close\"\n                        >\n                            <CloseIcon />\n                        </IconButton>\n                        <H6\n                            sx={{\n                                flex: 1,\n                                marginLeft: theme.spacing(2),\n                            }}\n                        >\n                            Sound\n                        </H6>\n                        <Button color=\"inherit\" onClick={handleClose}>\n                            save\n                        </Button>\n                    </Toolbar>\n                </AppBar>\n                <List>\n                    <ListItem button>\n                        <ListItemText\n                            primary=\"Phone ringtone\"\n                            secondary=\"Titania\"\n                        />\n                    </ListItem>\n                    <Divider />\n                    <ListItem button>\n                        <ListItemText\n                            primary=\"Default notification ringtone\"\n                            secondary=\"Tethys\"\n                        />\n                    </ListItem>\n                </List>\n            </Dialog>\n        </div>\n    )\n}\n","import React from 'react'\nimport { styled } from '@mui/system'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport Select from '@mui/material/Select'\nimport Switch from '@mui/material/Switch'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport FormControl from '@mui/material/FormControl'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogRoot = styled('div')(({ theme }) => ({\n    '& form': {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    '& .formControl': {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    '& .formControlLabel': {\n        marginTop: theme.spacing(1),\n    },\n}))\n\nexport default function MaxWidthDialog() {\n    const [open, setOpen] = React.useState(false)\n    const [fullWidth, setFullWidth] = React.useState(true)\n    const [maxWidth, setMaxWidth] = React.useState('sm')\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n    function handleClose() {\n        setOpen(false)\n    }\n    function handleMaxWidthChange(event) {\n        setMaxWidth(event.target.value)\n    }\n    function handleFullWidthChange(event) {\n        setFullWidth(event.target.checked)\n    }\n\n    return (\n        <DialogRoot>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Open max-width dialog\n            </Button>\n            <Dialog\n                fullWidth={fullWidth}\n                maxWidth={maxWidth}\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"max-width-dialog-title\"\n            >\n                <DialogTitle id=\"max-width-dialog-title\">\n                    Optional sizes\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        You can set my maximum width and whether to adapt or\n                        not.\n                    </DialogContentText>\n                    <form noValidate>\n                        <FormControl className='formControl'>\n                            <InputLabel htmlFor=\"max-width\">\n                                maxWidth\n                            </InputLabel>\n                            <Select\n                                value={maxWidth}\n                                onChange={handleMaxWidthChange}\n                                inputProps={{\n                                    name: 'max-width',\n                                    id: 'max-width',\n                                }}\n                            >\n                                <MenuItem value={false}>false</MenuItem>\n                                <MenuItem value=\"xs\">xs</MenuItem>\n                                <MenuItem value=\"sm\">sm</MenuItem>\n                                <MenuItem value=\"md\">md</MenuItem>\n                                <MenuItem value=\"lg\">lg</MenuItem>\n                                <MenuItem value=\"xl\">xl</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <FormControlLabel\n                            className='formControlLabel'\n                            control={\n                                <Switch\n                                    checked={fullWidth}\n                                    onChange={handleFullWidthChange}\n                                    value=\"fullWidth\"\n                                />\n                            }\n                            label=\"Full width\"\n                        />\n                    </form>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </DialogRoot>\n    )\n}\n","import React from 'react'\nimport { useTheme } from '@mui/system'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nexport default function ResponsiveDialog() {\n    const [open, setOpen] = React.useState(false)\n    const theme = useTheme()\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\n\n    function handleClickOpen() {\n        setOpen(true)\n    }\n\n    function handleClose() {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={handleClickOpen}\n            >\n                Open responsive dialog\n            </Button>\n            <Dialog\n                fullScreen={fullScreen}\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"responsive-dialog-title\"\n            >\n                <DialogTitle id=\"responsive-dialog-title\">\n                    {\"Use Google's location service?\"}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Let Google help apps determine location. This means\n                        sending anonymous location data to Google, even when no\n                        apps are running.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Disagree\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\" autoFocus>\n                        Agree\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@mui/material/Button'\nimport List from '@mui/material/List'\nimport ListItem from '@mui/material/ListItem'\nimport ListItemText from '@mui/material/ListItemText'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Dialog from '@mui/material/Dialog'\nimport RadioGroup from '@mui/material/RadioGroup'\nimport Radio from '@mui/material/Radio'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport { styled } from '@mui/system'\n\nconst options = [\n    'None',\n    'Atria',\n    'Callisto',\n    'Dione',\n    'Ganymede',\n    'Hangouts Call',\n    'Luna',\n    'Oberon',\n    'Phobos',\n    'Pyxis',\n    'Sedna',\n    'Titania',\n    'Triton',\n    'Umbriel',\n]\n\nfunction ConfirmationDialogRaw(props) {\n    const { onClose, value: valueProp, open, ...other } = props\n    const [value, setValue] = React.useState(valueProp)\n    const radioGroupRef = React.useRef(null)\n\n    React.useEffect(() => {\n        if (!open) {\n            setValue(valueProp)\n        }\n    }, [valueProp, open])\n\n    function handleEntering() {\n        if (radioGroupRef.current != null) {\n            radioGroupRef.current.focus()\n        }\n    }\n\n    function handleCancel() {\n        onClose()\n    }\n\n    function handleOk() {\n        onClose(value)\n    }\n\n    function handleChange(event, newValue) {\n        setValue(newValue)\n    }\n\n    return (\n        <Dialog\n            disableBackdropClick\n            disableEscapeKeyDown\n            maxWidth=\"xs\"\n            onEntering={handleEntering}\n            aria-labelledby=\"confirmation-dialog-title\"\n            open={open}\n            {...other}\n        >\n            <DialogTitle id=\"confirmation-dialog-title\">\n                Phone Ringtone\n            </DialogTitle>\n            <DialogContent dividers>\n                <RadioGroup\n                    ref={radioGroupRef}\n                    aria-label=\"Ringtone\"\n                    name=\"ringtone\"\n                    value={value}\n                    onChange={handleChange}\n                >\n                    {options.map((option) => (\n                        <FormControlLabel\n                            value={option}\n                            key={option}\n                            control={<Radio />}\n                            label={option}\n                        />\n                    ))}\n                </RadioGroup>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    onClick={handleCancel}\n                >\n                    Cancel\n                </Button>\n                <Button onClick={handleOk} color=\"primary\">\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nConfirmationDialogRaw.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    value: PropTypes.string.isRequired,\n}\n\nconst DialogRoot = styled('div')(({ theme }) => ({\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    '& .paper': {\n        width: '80%',\n        maxHeight: 435,\n    }\n}))\n\nexport default function ConfirmationDialog() {\n    const [open, setOpen] = React.useState(false)\n    const [value, setValue] = React.useState('Dione')\n\n    function handleClickListItem() {\n        setOpen(true)\n    }\n\n    function handleClose(newValue) {\n        setOpen(false)\n\n        if (newValue) {\n            setValue(newValue)\n        }\n    }\n\n    return (\n        <DialogRoot>\n            <List component=\"div\" role=\"list\">\n                <ListItem button divider disabled role=\"listitem\">\n                    <ListItemText primary=\"Interruptions\" />\n                </ListItem>\n                <ListItem\n                    button\n                    divider\n                    aria-controls=\"ringtone-menu\"\n                    aria-label=\"Phone ringtone\"\n                    onClick={handleClickListItem}\n                    role=\"listitem\"\n                >\n                    <ListItemText primary=\"Phone ringtone\" secondary={value} />\n                </ListItem>\n                <ListItem button divider disabled role=\"listitem\">\n                    <ListItemText\n                        primary=\"Default notification ringtone\"\n                        secondary=\"Tethys\"\n                    />\n                </ListItem>\n                <ConfirmationDialogRaw\n                    keepMounted\n                    open={open}\n                    value={value}\n                    className=\"paper\"\n                    id=\"ringtone-menu\"\n                    onClose={handleClose}\n                />\n            </List>\n        </DialogRoot>\n    )\n}\n","import React from 'react'\nimport { Breadcrumb, SimpleCard } from 'app/components'\nimport SimpleDialogDemo from './SimpleDialog'\nimport AlertDialog from './SimpleAlerts'\nimport AlertDialogSlide from './DialogTransition'\nimport FormDialog from './FormDialog'\nimport CustomizedDialogs from './CustomizedDialog'\nimport FullScreenDialog from './FullScreenDialog'\nimport MaxWidthDialog from './OptimalSizeDialog'\nimport ResponsiveDialog from './ResponsiveDialog'\nimport ConfirmationDialog from './ConfirmationDialog'\nimport { Box, styled } from '@mui/system'\n\nconst Container = styled('div')(({ theme }) => ({\n    margin: '30px',\n    [theme.breakpoints.down('sm')]: {\n        margin: '16px',\n    },\n    '& .breadcrumb': {\n        marginBottom: '30px',\n        [theme.breakpoints.down('sm')]: {\n            marginBottom: '16px',\n        },\n    },\n}))\n\nconst AppDialog = () => {\n    return (\n        <Container>\n            <div className=\"breadcrumb\">\n                <Breadcrumb\n                    routeSegments={[\n                        { name: 'Material', path: '/material' },\n                        { name: 'Dialog' },\n                    ]}\n                />\n            </div>\n            <SimpleCard title=\"simple Dialog\">\n                <SimpleDialogDemo />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"alert dialog\">\n                <AlertDialog />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"transition\">\n                <AlertDialogSlide />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"form dialog\">\n                <FormDialog />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"customized dialog\">\n                <CustomizedDialogs />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"full-screen dialog\">\n                <FullScreenDialog />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"optimized size dialog\">\n                <MaxWidthDialog />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"responsive dialog\">\n                <ResponsiveDialog />\n            </SimpleCard>\n            <Box py=\"12px\" />\n            <SimpleCard title=\"confirmation dialog\">\n                <ConfirmationDialog />\n            </SimpleCard>\n        </Container>\n    )\n}\n\nexport default AppDialog\n"],"sourceRoot":""}